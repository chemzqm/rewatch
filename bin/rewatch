#!/usr/bin/env node

var Rewatch = require('..');

function main(argv) {

  var getArg = function() {
    var args = argv.shift();
    args = args.split('=');
    if (args.length > 1) {
      argv.unshift(args.slice(1).join('='));
    }
    return args[0];
  };

  var arg, cmd, interval, files = [];

  while (argv.length) {
    arg = getArg();
    switch(arg) {
      case '-c':
      case '--command':
        cmd = argv.shift();
        break;
      case '-i':
      case '-I':
      case '--interval':
        interval = argv.shift();
        break;
      case '-v':
      case '-V':
      case '--version':
        printVersion();
        break;
      case '-h':
      case '-H':
      case '--help':
        printHelp();
        break;
      default:
        files.push(arg);
        break;
    }
  }
  if (!cmd) {
    printHelp(1);
  }
  new Rewatch(files, cmd, interval);
}

main(process.argv.slice(2));

function printVersion() {
  var pkg = require('../package');
  console.log('rewatch ' + pkg.version);
  process.exit();
}

function printHelp(code) {
  var lines = [
    '',
    '  Usage:',
    '    rewatch [files..] -c "[command]"',
    '',
    '  Options:',
    '    -c, --command=<command>   a shell command',
    '    -i, --interval=[ms]       interval micro seconds',
    '    -v, --version             print the version of vc',
    '    -h, --help                display this message',
    '',
    '  Examples:',
    '    $ rewatch *.js foo.css -c "make build"',
    '    $ rewatch *.js foo.css -c "make build" -i 500',
    ''
  ];
  console.log(lines.join('\n'));
  process.exit(code || 0);
}
